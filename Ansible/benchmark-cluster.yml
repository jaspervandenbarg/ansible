---
- hosts: localhost
  gather_facts: yes
  become: yes
  tasks:
    - name: update Debian
      ansible.builtin.apt:
        update_cache: yes
      when: ansible_os_family == 'Debian'

    - name: update RedHat
      ansible.builtin.yum:
        update_cache: yes
      when: ansible_os_family == 'RedHat'

    - ansible.builtin.package:
        name:
          - wrk
        state: present

- hosts: master
  tasks:
    - name: remove whoami service
      command: "sudo docker service rm whoami"
      become: yes
      ignore_errors: True

    - name: create whoami service with 1 instance
      command: "sudo docker service create --name whoami --publish published=8080,target=80 --replicas 1 containous/whoami"
      become: yes


- hosts: localhost
  gather_facts: yes
  tasks:
    - name: wrk 1
      command: "sudo wrk -t4 -c5 -d30s http://{{ hostvars | first }}:8080"
      register: wrk_output

    - name:
      ansible.builtin.debug:
        msg: '{{ wrk_output.stdout_lines | select("search", "Req/Sec") }}'

# REPEAT FOR SCALE 2
- hosts: master
  tasks:
    - name: remove whoami service
      command: "sudo docker service rm whoami"
      become: yes
      ignore_errors: True

    - name: create whoami service with 2 instances
      command: "sudo docker service create --name whoami --publish published=8080,target=80 --replicas 2 containous/whoami"
      become: yes


- hosts: localhost
  gather_facts: yes
  tasks:
    - name: wrk 2
      command: "sudo wrk -t4 -c5 -d30s http://{{ hostvars | first }}:8080"
      register: wrk_output2

    - name:
      ansible.builtin.debug:
        msg: '{{ wrk_output2.stdout_lines | select("search", "Req/Sec") }}'

# REPEAT FOR SCALE 4
- hosts: master
  tasks:
    - name: remove whoami service
      command: "sudo docker service rm whoami"
      become: yes
      ignore_errors: True

    - name: create whoami service with 4 instances
      command: "sudo docker service create --name whoami --publish published=8080,target=80 --replicas 4 containous/whoami"
      become: yes


- hosts: localhost
  gather_facts: yes
  tasks:
    - name: wrk 4
      command: "sudo wrk -t4 -c5 -d30s http://{{ hostvars | first }}:8080"
      register: wrk_output4

    - name:
      ansible.builtin.debug:
        msg: '{{ wrk_output4.stdout_lines | select("search", "Req/Sec") }}'

# REPEAT FOR SCALE 8
- hosts: master
  tasks:
    - name: remove whoami service
      command: "sudo docker service rm whoami"
      become: yes
      ignore_errors: True

    - name: create whoami service with 8 instances
      command: "sudo docker service create --name whoami --publish published=8080,target=80 --replicas 8 containous/whoami"
      become: yes


- hosts: localhost
  gather_facts: yes
  tasks:
    - name: wrk 8
      command: "sudo wrk -t4 -c5 -d30s http://{{ hostvars | first }}:8080"
      register: wrk_output8

    - name:
      ansible.builtin.debug:
        msg: '{{ wrk_output8.stdout_lines | select("search", "Req/Sec") }}'


# This was my attempt to loop instead of hard code but was not able to get debugging to run with the loop
# loop command worked, both examples, but the debug command did not work
# https://stackoverflow.com/questions/30785281/one-loop-over-multiple-ansible-tasks


# - hosts: master
#   vars:
#     instances:
#       - 1
#       - 2
#       - 4
#       - 8

#   tasks:
#     - name: remove whoami service and then create whoami service for multiple instance configurations
#       shell: |
#         sudo docker service rm whoami
#         sudo docker service create --name whoami --publish published=8080,target=80 --replicas {{ item }} containous/whoami
#       become: yes
#       ignore_errors: True
#       with_items:
#         - 1
#         - 2
#         - 4
#         - 8


#     - name: remove whoami service and then create whoami service for multiple instance configurations
#       shell: |
#         sudo docker service rm whoami
#         sudo docker service create --name whoami --publish published=8080,target=80 --replicas {{ item }} containous/whoami
#       delegate_to: localhost
#       become: yes
#       ignore_errors: True
#       loop: "{{ instances }}"